//load_file("nrngui.hoc") 
//load_proc("nrnmainmenu")

// ************************** Model specification *******************************
proc params() {
	// Geometrical properties
	D = 8
	num_nodes = 51				// number of nodes [unitless]
	node_diam = D*0.7			// node diameter [um]
	node_length = 1				// node length [um]
	myelin_length = 100*D		// internodal length [um]
	
	// Electrical properties
	node_cm = 2					// specific membrane capacitance [uF/cm^2]
	rhoa = 200					// intracellular resistivity [ohm-cm]
	rhoe = 1000					// extracellular resistivity [ohm-cm]
	node_Rm = 1500				// specific membrane resistance [ohm-cm^2]
	ap_thresh = 0 				// action potential threshold
	
	// Stimulus parameters
	mydel = 5					// start at t=5ms [ms]
	myamp = -1.0 				// amplitude [nA]
	mydur = 0.1					// duration, aka pulsewidth [ms]
	
	// Temporal parameters
	dt = 0.001					// [ms]
	tstop = 10					// [ms]
	num_timesteps = int(tstop/dt) + 1
	
	// Other parameters
	v_init = -65				// [mV]
	celsius = 6.3				// [deg C]
}
params()

func round(){
	if ($1>0){
		return int($1+0.5)
	} else {
		return int($1-0.5)
	}
}

// ************************** Model initialization ******************************
create axon[num_nodes]
proc initialize() {local i
	for i = 0, num_nodes - 1 {
		axon[i] {
			nseg 	= 1
			diam 	= node_diam
			L 		= node_length
			Ra 		= rhoa * ((node_length+myelin_length)/node_length)
			cm		= node_cm
			
			// Insert passive channel
			insert hh
			insert extracellular
			g_hh = 1/node_Rm // do we need to change this from g_pas -> g_hh?
			
		}
	}
	
	for i = 0, num_nodes - 2 {
		connect axon[i](1), axon[i+1](0)
	}
}
initialize()

// ************************** Instrumentation ***********************************
// Extracellular stimulation
objref stim
create dummy
dummy {
	stim = new IClamp()
	stim.loc(0.5)
	stim.del = mydel	// [ms]
	stim.amp = myamp	// [nA]
	stim.dur = mydur 	// [ms]
}

// Record Vm(t) at all nodes
objref Vm_vec[num_nodes], Istim_vec
Istim_vec = new Vector(tstop/dt)
for i = 0, num_nodes - 1 {
	Vm_vec[i] = new Vector(num_timesteps,0)
	Vm_vec[i].record(&axon[i].v(0.5),dt)
}

// add APCount object to node 20
objref apc
axon[19] apc = new APCount(0.5)
apc.thresh = 35

// distance from electrode to each node
objref r_axon,xdist,ydist
proc create_r_axon(){
	r_axon = new Vector(num_nodes,0)
	xdist  = new Vector(num_nodes,0) 
	ydist  = new Vector(num_nodes,$1) // 1 mm away

	for i=0,num_nodes-1{
		xdist.x[i] = 0.5 + abs(i-round(num_nodes/2-1))*(myelin_length+node_length/2)
	}

	xdist.pow(2)
	ydist.pow(2)

	for i=0,num_nodes-1{
		r_axon.x[i] = sqrt(xdist.x[i]+ydist.x[i])*1e-4 // um -> cm
	}
	// r_axon.printf()
}

// ************************** Simulation control ********************************
proc stimul() {
	finitialize(v_init)
	while(t<tstop) {
		for i=0,num_nodes-1{
			axon[i].e_extracellular = rhoe * stim.i/(4*PI*r_axon.x[i])
		}
		fadvance()
	}
}

// proc to reset e_extracellular
proc reset_e_extracellular(){
	for i=0,num_nodes-1{
		axon[i].e_extracellular = 0
	}
}

// ************************** Binary Search Algo ********************************


func cutoff(){
	return int($1*100)/100
}

// create list of fiber diameters to evaluate
objref distanceList
distanceList = new Vector(7)
distanceList.x[0] = 0.1e3
distanceList.x[1] = 0.2e3
distanceList.x[2] = 0.5e3
distanceList.x[3] = 1e3
distanceList.x[4] = 2e3
distanceList.x[5] = 5e3
distanceList.x[6] = 10e3


proc iterative(){
	count=0
	while (count >= 0) {
		thisStim = cutoff((stimMax-stimMin)/2+stimMin)
		stim.amp = thisStim
		stimul()

		if (apc.n >= 1){
			// print "(apc.n >= 1) --> stimMax: ",stimMax,"to ",thisStim
			stimMax = thisStim
			print "thisStim=",thisStim,"(apc.n >= 1) --> search range (",stimMin,", ",stimMax,")"
		} else if (apc.n < 1){
			// print "(apc.n < 1) --> stimMin: ",stimMin,"to ",thisStim
			if (stimMin == thisStim) { 
				print "Stimulus threshold = ",thisStim-0.01,"nA" 
				break
			}
			stimMin = thisStim
			print "thisStim=",thisStim,"(apc.n < 1) --> search range (",stimMin,", ",stimMax,")"
		}
		count+=1
		// print "counter: ",count
		reset_e_extracellular()
	}
}

// ************************** Threshold-Fiber Diameter Relationship ********************************
objref f1
f1=new File()
f1.wopen("part6.txt")
f1.close()
f1.aopen("part6.txt")

for ii=2,distanceList.size()-1 {
	thisDist = distanceList.x[ii]

	initialize()
	create_r_axon(thisDist)

	stimMax = -10000
	stimMin = 0
	stim.amp = stimMax
	stimul()

	while (apc.n == 0) {
		print "No AP. stimMax=",stimMax
		stimMax = 2*stimMax
		stim.amp = stimMax
		stimul()
	}

	print "fiberD=",D,"fiber-electrode distance=",thisDist,"um"
	print "Check stimMax=",stim.amp,"nA: apc.n = ",apc.n

	iterative()

	// check that final choice is superthreshold
	stim.amp = thisStim-0.01
	stimul()
	print "Final Check for stim=",stim.amp,"nA, apc.n=",apc.n,"\n"

	if (apc.n==1) {
		f1.printf("%g %g \n",thisDist,stim.amp)
	}
}

f1.close()
