load_file("nrngui.hoc")	
func round(){
	if ($1>0){
		return int($1+0.5)
	} else {
		return int($1-0.5)
	}
}

objref v1
proc createVector(){
	startVal = $1
	stopVal  = $2
	stepVal  = $3
	numel    = (stopVal-startVal)/stepVal
	v1       = new Vector(numel+1)
	v1.x[0]  = startVal

	for i=1,numel{
		v1.x[i] = v1.x[i-1]+stepVal
	}
}

// Create list of numbers 0:0.1:10 to search from
createVector(0,10,0.1)
findValue = 4.3
v1.printf()

// ---- ITERATIVE binary search ----
proc iterative(){
	key  = $1
	imin = 0
	imax = v1.size()-1

	while (imax >= imin){
		imid = round((imax-imin)/2 + imin)
		midValue = v1.x[imid]

		// print imid
		// print midValue
		// print key
		

		if (midValue == key){
			// print imid
			break
		} else if (midValue < key) {
			imin = imid + 1
		} else if (midValue > key) {
			imax = imid - 1
		}

		// print "\n" 
	}

	if (midValue != key) {
		print "Key not found."
	} else {
		print "Index of key: "
		print imid
	}

}
iterative(findValue)