//load_file("nrngui.hoc") 
//load_proc("nrnmainmenu")

// ************************** Model specification *******************************
// Specific fiber sizes to test [um]
num_zstimvalues = 7
objref zstim_vec
zstim_vec = new Vector(num_zstimvalues,0)
zstim_vec.x[0] = 10000
zstim_vec.x[1] = 5000
zstim_vec.x[2] = 2000
zstim_vec.x[3] = 1000
zstim_vec.x[4] = 500
zstim_vec.x[5] = 200
zstim_vec.x[6] = 100


proc params() {
	// Geometrical properties
	num_nodes = 51				// number of nodes [unitless]
	D = 8						// myelin diameter [um]
	node_diam = 0.7*D			// node diameter [um]
	node_length = 1				// node length [um]
	myelin_length = 100*D		// internodal length [um]
	
	// Electrical properties
	node_cm = 2					// specific membrane capacitance [uF/cm^2]
	rhoa = 200					// intracellular resistivity [ohm-cm]
	rhoe = 1000					// extracellular resistivity [ohm-cm]
	v_init = -65				// [mV]
	ap_thresh = -20				// [mV]
	
	// Stimulus parameters
	mydel = 5						// start at t=5ms [ms]
	myamp = 0.5						// amplitude [mA]
	mydur = 0.1						// duration, aka pulsewidth [ms]
	//z_stim = $1					// electrode-fiber distance[um]
	x_stim_ind = int(num_nodes/2)	// index of electrode location along the axon
	
	// Finding threshold
	lower_bound_init = 0				// [mA]
	upper_bound_init = -20			// [mA]
	resolution = 0.001			// [mA]
	
	// Temporal parameters
	dt = 0.001					// [ms]
	tstop = 30					// [ms]
	num_timesteps = int(tstop/dt) + 1
	
	// Other parameters
	celsius = 6.3				// [deg C]
}
params()

// ************************** Model initialization ******************************
create axon[1]

// Coordinates of nodes along the axon
objref x_axon

proc initialize() {local i
	create axon[num_nodes]
	x_axon = new Vector(num_nodes,0)
	
	for i = 0, num_nodes - 1 {
		axon[i] {
			nseg 	= 1
			diam 	= node_diam
			L 		= node_length
			Ra 		= rhoa * ((node_length+myelin_length)/node_length)
			cm		= node_cm
			
			// Insert HH channels
			insert hh
			
			// Insert extracellular mechanism
			insert extracellular
		}
	}
	
	for i = 0, num_nodes - 2 {
		connect axon[i](1), axon[i+1](0)
	}
	
	x_axon.x[0] = node_length/2
	for i = 1, num_nodes - 1 {
		x_axon.x[i] = x_axon.x[i-1] + myelin_length + node_length		// [um]
	}
	x_stim = x_axon.x[x_stim_ind]					// [um]
}
initialize()

// ************************** Instrumentation ***********************************

// Extracellular stimulation
objref stim
create myelec
proc ext_stim() {
	myelec {
		stim = new IClamp()
		stim.loc(0.5)
		stim.del = mydel
		stim.amp = myamp
		stim.dur = mydur
	}
}
ext_stim()

objref Vm_vec[1]
objref stim_vec
objref apc
proc recording() {
	// Record Vm(t) at all nodes
	objref Vm_vec[num_nodes]
	for i = 0, num_nodes - 1 {
		Vm_vec[i] = new Vector(num_timesteps,0)
		Vm_vec[i].record(&axon[i].v(0.5),dt)
	}

	// Record the stimulus current
	stim_vec = new Vector(num_timesteps,0) 
	stim_vec.record(&stim.i,dt)

	// Check for AP's
	axon[19] apc = new APCount(0.5)
	apc.thresh = ap_thresh	
}
recording()

// ************************** Simulation control ********************************
proc stimul() {local myzstim
	
	stim.amp = $1
	myzstim = $2
	
	finitialize(v_init)
	
	for i = 0, num_nodes - 1 {
		axon[i].e_extracellular = 0
	}
	
	while(t<tstop) {
		for i = 0, num_nodes-1 {
			// Units: Need e_extracellular in mV
			// Take stim.i in mA; yes, technically point sources are in nA in NEURON,
			// but here, stim.i is only used in this equation, 
			// so we can take the most convenient units for our purposes.
			// ohm*cm*mA/(um)
			// So multiply by 10000 um/cm to convert to mV
			axon[i].e_extracellular = 10000*rhoe*stim.i/(4*PI*sqrt((x_axon.x[i] - x_stim)^2 + myzstim^2))
		}
		fadvance()
	}
}
//stimul()

// ************************** Find threshold ************************************
proc find_thresh() {local myzstim
	myzstim = $1
	
	lower_bound = lower_bound_init
	upper_bound = upper_bound_init
	
	stimul(upper_bound, myzstim)
	
	if (apc.n == 0) {
		print "ERROR: Initial istim_top value does not elicit an AP - need to increase its magnitude"
		return 0
	} else {
		while(1) {
			new_guess = (lower_bound + upper_bound) / 2
			stimul(new_guess,myzstim)
			//print new_guess, apc.n
			
			if ( abs(upper_bound - lower_bound) < resolution ) {
				if (apc.n == 0) {
					new_guess = last_guess
					stimul(last_guess,myzstim)		// for plotting
				}
				print "Done searching! z_stim = ", myzstim, "um; thresh = ", new_guess, "mA"
				
				// Set new starting upper bound as threshold from previous z_stim
				upper_bound_init = new_guess
				break
			} else if (apc.n >= 1) {
				last_guess = new_guess
				upper_bound = new_guess
			} else if (apc.n == 0) {
				lower_bound = new_guess
			}
		}
	}
}
//find_thresh()

// ************************** Batch run *****************************************
proc batchrun() {
	for zstim_ind = 0, num_zstimvalues-1 {
		find_thresh(zstim_vec.x[zstim_ind])
	}
}
batchrun()

// ************************** Data analysis & output ****************************
// Plot Vm(t) at the axon's center
objref g1, g2
proc plot_data() {
	g1 = new Graph()
	g1.size(0, num_timesteps, -100, 100)
	Vm_vec[44].plot(g1)
	
	g2 = new Graph()
	g2.size(0, num_timesteps, 0, 10)
	stim_vec.plot(g2)
}
//plot_data()